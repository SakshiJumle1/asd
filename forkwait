##Zombie Process
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<stdio.h>
#include<stdlib.h>
int main()
{
int status;
pid_t pid;
pid=fork();
if(pid!=0)
{
sleep(2);
system("ps");
wait(&status);
system("ps");
printf("\nParent Process");
printf("\nID = %d ",getpid());
printf("\nParent ID = %d ",getppid());
printf("\nChild ID = %d ",pid);
}
else
printf("\nChild Process");
{
printf("\nChild ID = %d ",getpid());
printf("\nParent ID = %d ",getppid());
}
return 0;
}

##Orphan Process
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<stdio.h>
#include<stdlib.h>
int main()
{
int status;
pid_t pid;
pid=fork();
if(pid!=0)
{
printf("\nParent Process");
printf("\nID = %d ",getpid());
printf("\nParent ID = %d ",getppid());
printf("\nChild ID = %d ",pid);
}
else
{
sleep(2);
printf("\nChild Process");
printf("\nChild ID = %d ",getpid());
printf("\nParent ID = %d ",getppid());
}
return 0;
}

##Parent & Child Process Sorting
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<stdio.h>
#include<stdlib.h>
int main()
{
int n;
printf("\nEnter the size of array ");
scanf("%d",&n);
int arr[n];
for(int i=0;i<n;i++)
{ 
scanf("%d",&arr[i]);
}
int status:
pid_t pid;
pid=fork();
if(pid!=0)
{
wait(&status);
printf("\nParent Process"); 
for(int i=0;i<n;i++)
{ 
for(int j=0;j<n-i-1:j++) {
if(arr[j]>arr[j+1])
{
int temp=arr[j]:
arr[j]=arr[j+1];
arr[j+1]=temp;
}
}
}
for(int i=0;i<n;i++)
{
printf("%d ",arr[i]);
}
}
else
{
printf("\nChild Process");
for(int i=0;i<n;i++)
{
for(int j=0;j<n-i-1;j++)
{
if(arr[j]<arr[j+1])
{
int temp=arr[j];
arr[j]=arr[j+1];
arr[j+1]=temp;
}
}
}
for(int i=0;i<n;i++)
{
printf("%d ",arr[i]);
}
}
return 0;
}

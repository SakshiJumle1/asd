#include <iostream>
#include <semaphore.h>
#include <pthread.h>
#include <stdlib.h>
using namespace std;
sem_te, f, s;
int buff[5] (-1, -1, -1, -1, -1);
int in = 0;
int out = 0;
void* producer(void* arg) {
sem_wait(&e);
sem_wait(&s);
buff[in] = rand() % 100;
in = (in+1)%5;
cout << "PRODUCED! {";
 for(int i=0; i<4; i++){
cout << buff[i] <<", ";
} 
cout << buff[4] << " }" << endl;
sem_post(&s);
sem_post(&f);
return NULL;
}
void* consumer(void* arg) {
int val;
do{
sem_wait(&f);
sem_wait(&s);
cout << buff[out] << " CONSUMED! { ";
buff[out] = -1;
for(int i=0; i<4; i++){
cout << buff[i] <<"/";
}
cout << buff[4] <<"}" << endl;
out = (out+1)%5;
sem_post(&s);
sem_post(&e);
sem_getvalue(&e, &val); 
}
 while(val != 5); 
return NULL;
}
int main() {
sem_init(&e, 0, 5);
sem_init(&f, 0, 0);
sem_init(&s, 0, 1);
pthread_t p[8], c;
for(int i=0; i<8; i++) {
pthread_create(&p[i], NULL, producer, NULL);
}
pthread_create(&c, NULL, consumer, NULL);
for(int i=0; i<8; i++){
pthread_join(p[i], NULL);
}
pthread_join(c, NULL);
return 0;
}

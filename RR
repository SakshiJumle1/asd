#ROUND ROBIN
#include <stdio.h>
#include <limits.h>
struct Process
{
   int pid;
    int arrival;
    int burst;
    int remaining;
    int completion;
    int start;
};
void round_robin(struct Process processes[], int n, int quantum)
{
int time = 0, completed = 0;
int total_wait = 0, total_turnaround = 0;
while (completed < n)
{
int found = 0;
for (int i = 0; i < n; i++)
{
if (processes[i].arrival <= time && processes[i].remaining > 0)
{
found = 1;
if (processes[i].remaining <= quantum)
  {
time += processes[i].remaining;
processes[i].remaining = 0;
processes[i].completion = time;
      completed++;
int turnaround = processes[i].completion - processes[i].arrival;
int waiting = turnaround - processes[i].burst;
total_turnaround += turnaround;
total_wait += waiting;
}
else
{
time += quantum;
processes[i].remaining -= quantum;
}
}
}
if (!found) // If no process is found, increment time
{
time++;
 }
}
printf("\nPID\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n");
for (int i = 0; i < n; i++)
{
int turnaround = processes[i].completion - processes[i].arrival;
int waiting = turnaround - processes[i].burst;
printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival, processes[i].burst, processes[i].completion, turnaround, waiting);
 }
    printf("Average Turnaround time: %.2f\n", (float)total_turnaround / n);
    printf("Average Waiting time: %.2f\n", (float)total_wait / n);
}int main()
{
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the time quantum: ");
    scanf("%d", &quantum);
struct Process processes[10];
   for (int i = 0; i < n; i++)
    {
        processes[i].pid = i + 1;
        printf("Enter the arrival and burst time for process %d: ", processes[i].pid);
        scanf("%d%d", &processes[i].arrival, &processes[i].burst);
processes[i].remaining = processes[i].burst;
    }
round_robin(processes, n, quantum);
    return 0;
}
